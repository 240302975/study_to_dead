单表查询

select distinct 字段1,字段2,字段3 from 库.表
	where 条件
	group by 分组条件
	having 过滤
	order by 排序字段
	limit n;  限制显示条数


#where
select id,name,age from employee where id > 7;

select name,post,salary from employee where post='teacher' and salary > 8000;

select name,salary from employee where salary >= 20000 and salary <= 30000;
select name,salary from employee where salary between 20000 and 30000;

select name,salary from employee where salary < 20000 or salary > 30000;
select name,salary from employee where salary not between 20000 and 30000;


select * from employee where age = 73 or age = 81 or age = 28;
select * from employee where age in (73,81,28);

select * from employee where post_comment is Null;
select * from employee where post_comment is not Null;

select * from employee where name like "jin%";                  %表示任意多字符
select * from employee where name like "jin___";                _表示一个字符



#group by
mysql> set global sql_mode="ONLY_FULL_GROUP_BY";
分组之后，只能取分组的字段，以及每个组聚合结果

select post from employee group by post;


单独使用GROUP BY关键字分组
    SELECT post FROM employee GROUP BY post;
    注意：我们按照post字段分组，那么select查询的字段只能是post，想要获取组内的其他相关信息，需要借助函数

GROUP BY关键字和GROUP_CONCAT()函数一起使用
    SELECT post,GROUP_CONCAT(name) FROM employee GROUP BY post;#按照岗位分组，并查看组内成员名
    SELECT post,GROUP_CONCAT(name) as emp_members FROM employee GROUP BY post;

GROUP BY与聚合函数一起使用
    select post,count(id) as count from employee group by post;#按照岗位分组，并查看每个组有多少人


#聚合函数
max
min
avg
sum
count

#每个职位有多少个员工
select post,count(id) as emp_count from employee group by post;
select post,max(salary) as emp_count from employee group by post;
select post,min(salary) as emp_count from employee group by post;
select post,avg(salary) as emp_count from employee group by post;
select post,sum(age) as emp_count from employee group by post;

#没有group by则默认整体算作一组
select max(salary) from employee;

#group_concat
select post,group_concat(name) from employee group by post;


#练习：
查询岗位名以及岗位包含的所有员工名字
select post,group_concat(name) from employee group by post;

查询岗位名以及各岗位内包含的员工个数
select post,count(id) from employee where age > 50 group by post;

查询公司内男员工和女员工的个数
select sex,count(id) from employee group by sex;

查询岗位名以及各岗位的平均薪资
select post,avg(salary) from employee group by sex

查询岗位名以及各岗位的最高薪资
select post,max(salary) from employee group by post;

查询岗位名以及各岗位的最低薪资
select post,min(salary) from employee group by post;

查询男员工与男员工的平均薪资，女员工与女员工的平均薪资
select sex,avg(salary) from employee group by sex;


#having   过滤
！！！ 执行优先级从高到低：where > group by > having
select post,group_concat(name),count(id) from employee group by post;

select post,group_concat(name),count(id) from employee group by post having count(id) < 2;


select post,avg(salary) from employee group by post having avg(salary) > 10000;


#order by   查询排序
select * from employee order by age asc; #升序
select * from employee order by age desc; #降序

select * from employee order by age asc,id desc; #先按照age升序排，如果age相同则按照id降序排


select distinct post,count(id) as emp_count from employee
	where salary > 1000
	group by post
	having count(id) > 1
	order by emp_count desc
	;


#limit  限制条数
select * from employee limit 3;
select * from employee order by salary desc limit 1;


# 分页显示，每页5条
select * from employee limit 0,5;    从0开始取5条
select * from employee limit 5,5;
select * from employee limit 10,5;
select * from employee limit 15,5;


#总结：
	语法顺序：
		select distinct 字段1,字段2,字段3 from 库.表
			where 条件
			group by 分组条件
			having 过滤
			order by 排序字段
			limit n;

	执行顺序：

def from(db,table):
		f=open(r'%s\%s' %(db,table))
		return f

def where(condition,f):
	for line in f:
		if condition:
			yield line

def group(lines):
	pass

def having(group_res):
	pass

def distinct(having_res):
	pass

def order(distinct_res):
	pass

def limit(order_res)
	pass

def select():
	f=from('db1','t1')
	lines=where('id>3',f)
	group_res=group(lines)
	having_res=having(group_res)
	distinct_res=distinct(having_res)
	order_res=order(distinct_res)
	res=limit(order_res)
	print(res)
	return res

#正则表达式
select * from employee where name like 'jin%';
select * from employee where name regexp '^jin';
select * from employee where name regexp '^jin.*(g|n)$';    jin开头，g或者n结尾





#简单查询
    SELECT id,name,sex,age,hire_date,post,post_comment,salary,office,depart_id
    FROM employee;

    SELECT * FROM employee;

    SELECT name,salary FROM employee;

#避免重复DISTINCT
    SELECT DISTINCT post FROM employee;

#通过四则运算查询
    SELECT name, salary*12 FROM employee;
    SELECT name, salary*12 AS Annual_salary FROM employee;
    SELECT name, salary*12 Annual_salary FROM employee;

#定义显示格式
   CONCAT() 函数用于连接字符串
   SELECT CONCAT('姓名: ',name,'  年薪: ', salary*12)  AS Annual_salary
   FROM employee;

   CONCAT_WS() 第一个参数为分隔符
   SELECT CONCAT_WS(':',name,salary*12)  AS Annual_salary
   FROM employee;

   结合CASE语句：
   SELECT
       (
           CASE
           WHEN NAME = 'egon' THEN
               NAME
           WHEN NAME = 'alex' THEN
               CONCAT(name,'_BIGSB')
           ELSE
               concat(NAME, 'SB')
           END
       ) as new_name
   FROM
       emp;